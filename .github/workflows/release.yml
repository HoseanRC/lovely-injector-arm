name: Release

on: push

jobs:
  prepare:
    name: Create draft release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

        # Yes, this is the lazy way of doing it. Am I lazy? Yes.
      - name: Create draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat <<-'EOF' > NOTE.md
          ## [Install guide](https://github.com/ethangreen-dev/lovely-injector?tab=readme-ov-file#manual-installation)
          OS|Download|
          --|--|
          Windows|[lovely-x86_64-pc-windows-msvc.zip](https://github.com/ethangreen-dev/lovely-injector/releases/download/${{ github.ref_name }}/lovely-x86_64-pc-windows-msvc.zip)|
          Mac (Arm)|[lovely-aarch64-apple-darwin.tar.gz](https://github.com/ethangreen-dev/lovely-injector/releases/download/${{ github.ref_name }}/lovely-aarch64-apple-darwin.tar.gz)|
          Mac (x86)|[lovely-x86_64-apple-darwin.tar.gz](https://github.com/ethangreen-dev/lovely-injector/releases/download/${{ github.ref_name }}/lovely-x86_64-apple-darwin.tar.gz)|
          Linux|[x86_64-unknown-linux-gnu.tar.gz](https://github.com/ethangreen-dev/lovely-injector/releases/download/${{ github.ref_name }}/x86_64-unknown-linux-gnu.tar.gz)|
          Android (ARMv7)|[lovely-armv7-linux-androideabi.tar.gz](https://github.com/ethangreen-dev/lovely-injector/releases/download/${{ github.ref_name }}/lovely-armv7-linux-androideabi.tar.gz)|
          Android (AArch64)|[lovely-aarch64-linux-android.tar.gz](https://github.com/ethangreen-dev/lovely-injector/releases/download/${{ github.ref_name }}/lovely-aarch64-linux-android.tar.gz)|
          EOF

          gh release create ${{ github.ref_name }} \
          --title "${{ github.ref_name }}" \
          --draft  \
          --generate-notes \
          --notes-file NOTE.md \

  build-windows:
    needs: prepare
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}

      - name: Build
        run: cargo build --target ${{ matrix.target }} --package lovely-win --release

      - name: Compress
        run: |
          cd ./target/${{ matrix.target }}/release/
          7z a "lovely-${{ matrix.target }}.zip" version.dll
          mv "lovely-${{ matrix.target }}.zip" ${{ github.workspace }}

      - name: Submit build artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release upload ${{ github.ref_name }} lovely-${{ matrix.target }}.zip

  build-mac:
    needs: prepare
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}

      - name: Install Mac SDK
        run: |
          curl -L "https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.9.sdk.tar.xz" | tar -J -x -C /opt
          curl -L "https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz" | tar -J -x -C /opt
          echo "SDKROOT=/opt/MacOSX11.3.sdk" >> $GITHUB_ENV

      - name: Install cargo-zigbuild
        run: |
          pip3 install ziglang==0.13.0.post1 cargo-zigbuild

      - name: Build
        run: cargo zigbuild --target ${{ matrix.target }} --package lovely-unix --release

      - name: Compress tar.gz
        run: |
          cp ./crates/lovely-unix/run_lovely_macos.sh ./target/${{ matrix.target }}/release/
          cd ./target/${{ matrix.target }}/release/
          tar czfv lovely-${{ matrix.target }}.tar.gz liblovely.dylib run_lovely_macos.sh
          mv "lovely-${{ matrix.target }}.tar.gz" ${{ github.workspace }}

      - name: Submit build artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release upload ${{ github.ref_name }} lovely-${{ matrix.target }}.tar.gz

  build-linux:
    needs: prepare
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}

      - name: install gcc 14
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-14

          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 10

      - name: Build
        run: cargo build --target ${{ matrix.target }} --package lovely-unix --release

      - name: Compress tar.gz
        run: |
          cp ./crates/lovely-unix/run_lovely_linux.sh ./target/${{ matrix.target }}/release/
          cd ./target/${{ matrix.target }}/release/
          tar czfv lovely-${{ matrix.target }}.tar.gz liblovely.so run_lovely_linux.sh
          mv "lovely-${{ matrix.target }}.tar.gz" ${{ github.workspace }}

      - name: Submit build artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release upload ${{ github.ref_name }} lovely-${{ matrix.target }}.tar.gz

  build-android:
    needs: prepare
    strategy:
      matrix:
        target:
          - armv7-linux-androideabi
          - aarch64-linux-android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}

      - name: Install Android NDK
        uses: android-actions/setup-ndk@v2
        with:
          ndk-version: latest # Or a specific version like '23.1.7779620'

      - name: Install cargo-ndk
        run: cargo install cargo-ndk --version 2.7.0 # or latest compatible version

      - name: Build
        run: cargo ndk -t ${{ matrix.target }} build --package lovely-unix --release

      - name: Compress tar.gz
        run: |
          # Android typically uses .so for shared libraries
          # You might need to adjust the filename based on your project's output
          # For example, if it's liblovely.so, ensure that's what's being copied
          cp ./crates/lovely-unix/run_lovely_android.sh ./target/${{ matrix.target }}/release/ || true # Add a dummy script or adjust based on actual need
          cd ./target/${{ matrix.target }}/release/
          # Assuming the output shared library is liblovely.so
          tar czfv lovely-${{ matrix.target }}.tar.gz liblovely.so run_lovely_android.sh # Adjust 'run_lovely_android.sh' if not applicable
          mv "lovely-${{ matrix.target }}.tar.gz" ${{ github.workspace }}

      - name: Submit build artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          gh release upload ${{ github.ref_name }} lovely-${{ matrix.target }}.tar.gz
